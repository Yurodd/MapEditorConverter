import "customGameSettings.lobby";
globalvar define AllPos = EmptyArray();
globalvar define AllDir = EmptyArray();
playervar define filterpos = EmptyArray();
globalvar define firstpos = EmptyArray();
globalvar define secondpos = EmptyArray();
globalvar define firstpoint2 = EmptyArray();
globalvar define secondpoint2 = EmptyArray();
globalvar define second;
playervar define point;
globalvar define z;
playervar define lastsavedpos = 0;
playervar define closestbodypos =0;
playervar define fullbodypos =0;
playervar define vertical_points = EmptyArray();

//////////////////UI Variables//////////////
globalvar define showwalls = true;
playervar define openui = false;
playervar define UIVector;
playervar define UI_ID=0; //0 =  No Wall Default
globalvar define Wall_ID;
playervar define prevpos_intersection=0;
playervar define active_wall=0;
playervar define AllVertices;
playervar define closestwall;
playervar define beam_dir = EmptyArray();
playervar define beam_Cursor_ID;



////////////////Marcros//////////////////////////////////////
define eventPlayer: EventPlayer();
define ftbl: DotProduct(DirectionTowards(firstpos[z],Vector(XOf(firstpos[z]),YOf(secondpos[z]),ZOf(firstpos[z]))),DirectionTowards(firstpos[z],filterpos));
define fttr: DotProduct(DirectionTowards(firstpos[z],Vector(XOf(secondpos[z]),YOf(firstpos[z]),ZOf(secondpos[z]))),DirectionTowards(firstpos[z],filterpos));
define stbl: DotProduct(DirectionTowards(secondpos[z],Vector(XOf(firstpos[z]),YOf(secondpos[z]),ZOf(firstpos[z]))),DirectionTowards(secondpos[z],filterpos));
define sttr: DotProduct(DirectionTowards(secondpos[z],Vector(XOf(secondpos[z]),YOf(firstpos[z]),ZOf(secondpos[z]))),DirectionTowards(secondpos[z],filterpos));
define ftbl_prev_pos: DotProduct(DirectionTowards(firstpos[z],Vector(XOf(firstpos[z]),YOf(secondpos[z]),ZOf(firstpos[z]))),DirectionTowards(firstpos[z],prevpos_intersection));
define fttr_prev_pos: DotProduct(DirectionTowards(firstpos[z],Vector(XOf(secondpos[z]),YOf(firstpos[z]),ZOf(secondpos[z]))),DirectionTowards(firstpos[z],prevpos_intersection));
define stbl_prev_pos: DotProduct(DirectionTowards(secondpos[z],Vector(XOf(firstpos[z]),YOf(secondpos[z]),ZOf(firstpos[z]))),DirectionTowards(secondpos[z],prevpos_intersection));
define sttr_prev_pos: DotProduct(DirectionTowards(secondpos[z],Vector(XOf(secondpos[z]),YOf(firstpos[z]),ZOf(secondpos[z]))),DirectionTowards(secondpos[z],prevpos_intersection));
/////////////////////////////////////////////////////////////

rule: "Main Collision Logic"
Event.OngoingPlayer
if (HasSpawned())
{
    lastsavedpos = Midpoint(EyePosition(),PositionOf());
    Wait();   
    closestwall = FilteredArray(AllPos,
        DistanceBetween(AllPos[CurrentArrayIndex()],eventPlayer) <= DistanceBetween(AllPos[CurrentArrayIndex()],firstpos[CurrentArrayIndex()])
        || active_wall[CurrentArrayIndex()] == 1 || (DotProduct(DirectionTowards(ArrayElement(),lastsavedpos),AllDir[CurrentArrayIndex()]) > 0) != (DotProduct(DirectionTowards(ArrayElement(),eventPlayer),AllDir[CurrentArrayIndex()]) > 0)
        ); 
    
    for( define x = 0; x < CountOf(closestwall); x++)
    {
        z = IndexOfArrayValue(AllPos,closestwall[x]);
        if(YOf(firstpos[z]) >= YOf(PositionOf()) && YOf(firstpos[z]) <= YOf(EyePosition()+Vector(0,0.2,0)))
        {
            closestbodypos = firstpos[z];
        }
        else if(YOf(secondpos[z]) >= YOf(PositionOf()) && YOf(secondpos[z]) <= YOf(EyePosition()+Vector(0,0.2,0)))
        {
            closestbodypos = secondpos[z];
        }
        else
        {
            closestbodypos = PositionOf();
        }
        fullbodypos = Vector(XOf(EyePosition()),YOf(closestbodypos),ZOf(EyePosition()));
        filterpos = fullbodypos + AllDir[z] * DotProduct(AllPos[z] - fullbodypos,AllDir[z]) / DotProduct(AllDir[z], AllDir[z]);
        define thickness: 1;
        if(DistanceBetween(fullbodypos,filterpos)<=thickness&&fttr >= 0 && ftbl >= 0 && sttr >= 0 && stbl >= 0)
        {
            if(active_wall[z] == false)
                {
                    active_wall[z] = true;
                }
            ApplyImpulse(eventPlayer, DirectionTowards(filterpos,fullbodypos) * Vector(1,0,1), 0.001);
            if(ThrottleOf()!= Vector())
            SetMoveSpeed(eventPlayer,100 - (DotProduct(DirectionTowards(EyePosition(),EyePosition() + WorldVectorOf(ThrottleOf(),eventPlayer)),-1*DirectionTowards(filterpos,fullbodypos)) * 100));                                
        }
        else
        {
            active_wall[z] = 0;
            SetMoveSpeed(eventPlayer,100);
        }
        if((DotProduct(DirectionTowards(AllPos[z],lastsavedpos),AllDir[z]) > 0) != (DotProduct(DirectionTowards(AllPos[z],fullbodypos),AllDir[z]) > 0))
        {
            define intersection_length = DotProduct(AllPos[z] - fullbodypos,AllDir[z]) / DotProduct(DirectionTowards(lastsavedpos,fullbodypos) , AllDir[z]);
                prevpos_intersection = fullbodypos + (DirectionTowards(lastsavedpos,fullbodypos)) * intersection_length;
            if(fttr_prev_pos >= 0 && ftbl_prev_pos >= 0 && sttr_prev_pos >= 0 && stbl_prev_pos >= 0)
            {
                CancelPrimaryAction();
                define temp_calc_pos = prevpos_intersection + DirectionTowards(prevpos_intersection,lastsavedpos) * Vector(1,0,1) * 2;
                Teleport(eventPlayer,temp_calc_pos);
                Wait();
            }
        }
    }     
    Loop();

}

rule: 'My Rule'
{
    firstpos[0] = Vector(0,0,0);
    firstpoint2[0] = Vector(0,0,2);
    secondpos[0] = Vector(0,2,2);
    secondpoint2[0] = Vector(0,2,0);
    AllPos[0] = Vector(0,1,1);
    AllDir[0] = Vector(1,0,0);
    CreateBeamEffect(LocalPlayer(),BeamType.GoodBeam,Vector(0,2,0),Vector(0,2,2),Color.Yellow,EffectRev.VisibleTo);
    printToScreen($"Load:{ServerLoad()},Peak:{ServerLoadPeak()},Avg:{ServerLoadAverage()}");
}

define printToScreen(in String s){
    return printToScreen(s, Location.Left, true);
}

define printToScreen(in String s, Location l, Boolean shouldRev){
    if(shouldRev)
        return CreateHudText(LocalPlayer(), s, null, null, l, 1, Color.White, null, null, HudTextRev.VisibleToAndString,Spectators.DefaultVisibility);
    else 
        return CreateHudText(LocalPlayer(), s, null, null, l, 1, Color.White, null, null, HudTextRev.VisibleTo,Spectators.DefaultVisibility);
}